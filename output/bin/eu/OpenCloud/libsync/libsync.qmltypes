import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "account.h"
        name: "OCC::Account"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["eu.OpenCloud.libsync/Account 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Enum {
            name: "ServerSupportLevel"
            isScoped: true
            values: ["Supported", "Unknown", "Unsupported"]
        }
        Property { name: "uid"; type: "QUuid"; read: "uuid"; index: 0; isReadonly: true; isConstant: true }
        Property {
            name: "davDisplayName"
            type: "QString"
            read: "davDisplayName"
            notify: "displayNameChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "displayNameWithHost"
            type: "QString"
            read: "displayNameWithHost"
            notify: "displayNameChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "initials"
            type: "QString"
            read: "initials"
            notify: "displayNameChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "hostName"
            type: "QString"
            read: "hostName"
            notify: "urlChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "hasAvatar"
            type: "bool"
            read: "hasAvatar"
            notify: "avatarChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "avatarGradient"
            type: "QGradient::Preset"
            read: "avatarGradient"
            notify: "displayNameChanged"
            index: 6
            isReadonly: true
        }
        Property { name: "url"; type: "QUrl"; read: "url"; notify: "urlChanged"; index: 7; isReadonly: true }
        Signal { name: "invalidCredentials" }
        Signal { name: "credentialsFetched" }
        Signal { name: "credentialsAsked" }
        Signal {
            name: "wantsAccountSaved"
            Parameter { name: "acc"; type: "Account"; isPointer: true }
        }
        Signal { name: "serverVersionChanged" }
        Signal { name: "avatarChanged" }
        Signal { name: "displayNameChanged" }
        Signal { name: "unknownConnectionState" }
        Signal {
            name: "requestUrlUpdate"
            Parameter { name: "newUrl"; type: "QUrl" }
        }
        Signal {
            name: "appProviderErrorOccured"
            Parameter { name: "error"; type: "QString" }
        }
        Signal { name: "urlChanged" }
        Method { name: "clearAMCache" }
    }
    Component {
        file: "space.h"
        name: "OCC::GraphApi::Space"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["eu.OpenCloud.libsync/Space 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "image"
            type: "SpaceImage"
            isPointer: true
            read: "image"
            notify: "imageChanged"
            index: 0
            isReadonly: true
        }
        Signal { name: "imageChanged" }
    }
    Component {
        file: "space.h"
        name: "OCC::GraphApi::SpaceImage"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["eu.OpenCloud.libsync/SpaceImage 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "qmlImageUrl"
            type: "QUrl"
            read: "qmlImageUrl"
            notify: "imageChanged"
            index: 0
            isReadonly: true
        }
        Signal { name: "imageChanged" }
    }
    Component {
        file: "theme.h"
        name: "OCC::QmlButtonColor"
        accessSemantics: "value"
        exports: ["eu.OpenCloud.libsync/buttonColor 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property { name: "color"; type: "QColor"; index: 0; isConstant: true }
        Property { name: "textColor"; type: "QColor"; index: 1; isConstant: true }
        Property { name: "textColorDisabled"; type: "QColor"; index: 2; isConstant: true }
        Property { name: "valid"; type: "bool"; read: "valid"; index: 3; isReadonly: true; isConstant: true }
    }
    Component {
        file: "theme.h"
        name: "OCC::QmlUrlButton"
        accessSemantics: "value"
        exports: ["eu.OpenCloud.libsync/urlbuttondata 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property { name: "icon"; type: "QString"; index: 0; isConstant: true }
        Property { name: "name"; type: "QString"; index: 1; isConstant: true }
        Property { name: "url"; type: "QUrl"; index: 2; isConstant: true }
    }
    Component {
        file: "theme.h"
        name: "OCC::Theme"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["eu.OpenCloud.libsync/Theme 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
        Enum {
            name: "VersionFormat"
            isScoped: true
            values: ["Plain", "Url", "RichText", "OneLiner"]
        }
        Property {
            name: "multiAccount"
            type: "bool"
            read: "multiAccount"
            index: 0
            isReadonly: true
            isFinal: true
            isConstant: true
        }
        Property {
            name: "urlButtons"
            type: "QmlUrlButton"
            isList: true
            read: "qmlUrlButtons"
            index: 1
            isReadonly: true
            isFinal: true
            isConstant: true
        }
        Property {
            name: "avatarColor"
            type: "QColor"
            read: "avatarColor"
            notify: "themeChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "avatarColorChecked"
            type: "QColor"
            read: "avatarColorChecked"
            notify: "themeChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "brandedBackgoundColor"
            type: "QColor"
            read: "wizardHeaderBackgroundColor"
            index: 4
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "brandedForegroundColor"
            type: "QColor"
            read: "wizardHeaderTitleColor"
            index: 5
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "primaryButtonColor"
            type: "QmlButtonColor"
            read: "primaryButtonColor"
            index: 6
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "secondaryButtonColor"
            type: "QmlButtonColor"
            read: "secondaryButtonColor"
            index: 7
            isReadonly: true
            isConstant: true
        }
        Signal { name: "themeChanged" }
    }
}
