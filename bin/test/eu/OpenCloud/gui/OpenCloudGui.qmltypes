import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "accountmanager.h"
        name: "OCC::AccountManager"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["eu.OpenCloud.gui/AccountManager 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
        Property {
            name: "accounts"
            type: "QList<AccountState*>"
            read: "accountsRaw"
            notify: "accountsChanged"
            index: 0
            isReadonly: true
        }
        Signal {
            name: "accountAdded"
            Parameter { name: "account"; type: "AccountStatePtr" }
        }
        Signal {
            name: "accountRemoved"
            Parameter { name: "account"; type: "AccountStatePtr" }
        }
        Signal { name: "accountsChanged" }
    }
    Component {
        file: "accountsettings.h"
        name: "OCC::AccountSettings"
        accessSemantics: "reference"
        prototype: "QWidget"
        exports: ["eu.OpenCloud.gui/AccountSettings 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Enum {
            name: "ModalWidgetSizePolicy"
            isScoped: true
            values: ["Minimum", "Expanding"]
        }
        Property { name: "accountState"; type: "AccountState"; isPointer: true; index: 0; isConstant: true }
        Property {
            name: "model"
            type: "QSortFilterProxyModel"
            isPointer: true
            index: 1
            isConstant: true
        }
        Property {
            name: "unsyncedSpaces"
            type: "uint"
            read: "unsyncedSpaces"
            notify: "unsyncedSpacesChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "syncedSpaces"
            type: "uint"
            read: "syncedSpaces"
            notify: "syncedSpacesChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "connectionLabel"
            type: "QString"
            read: "connectionLabel"
            notify: "connectionLabelChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "accountStateIconGlype"
            type: "QChar"
            read: "accountStateIconGlype"
            notify: "connectionLabelChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "notifications"
            type: "QSet<Notification>"
            read: "notifications"
            notify: "notificationsChanged"
            index: 6
            isReadonly: true
        }
        Signal { name: "focusFirst" }
        Signal { name: "focusLast" }
        Signal { name: "showIssuesList" }
        Signal { name: "unsyncedSpacesChanged" }
        Signal { name: "syncedSpacesChanged" }
        Signal { name: "connectionLabelChanged" }
        Signal { name: "notificationsChanged" }
        Method { name: "slotAccountStateChanged" }
        Method { name: "slotSpacesUpdated" }
        Method { name: "slotAddFolder" }
        Method {
            name: "slotEnableCurrentFolder"
            Parameter { name: "folder"; type: "Folder"; isPointer: true }
            Parameter { name: "terminate"; type: "bool" }
        }
        Method {
            name: "slotEnableCurrentFolder"
            isCloned: true
            Parameter { name: "folder"; type: "Folder"; isPointer: true }
        }
        Method {
            name: "slotForceSyncCurrentFolder"
            Parameter { name: "folder"; type: "Folder"; isPointer: true }
        }
        Method {
            name: "slotRemoveCurrentFolder"
            Parameter { name: "folder"; type: "Folder"; isPointer: true }
        }
        Method {
            name: "slotEnableVfsCurrentFolder"
            Parameter { name: "folder"; type: "Folder"; isPointer: true }
        }
        Method {
            name: "slotDisableVfsCurrentFolder"
            Parameter { name: "folder"; type: "Folder"; isPointer: true }
        }
        Method {
            name: "showSelectiveSyncDialog"
            Parameter { name: "folder"; type: "Folder"; isPointer: true }
        }
        Method { name: "slotFolderWizardAccepted" }
        Method { name: "slotDeleteAccount" }
        Method { name: "slotToggleSignInState" }
        Method { name: "markNotificationsRead" }
        Method { name: "focusNext" }
        Method { name: "focusPrevious" }
    }
    Component {
        file: "accountstate.h"
        name: "OCC::AccountState"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["eu.OpenCloud.gui/AccountState 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Enum {
            name: "State"
            values: [
                "SignedOut",
                "Disconnected",
                "Connected",
                "ServiceUnavailable",
                "MaintenanceMode",
                "NetworkError",
                "ConfigurationError",
                "AskingCredentials",
                "Connecting"
            ]
        }
        Property {
            name: "account"
            type: "Account"
            isPointer: true
            read: "accountForQml"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "isConnected"
            type: "bool"
            read: "isConnected"
            notify: "isConnectedChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "state"
            type: "AccountState::State"
            read: "state"
            notify: "stateChanged"
            index: 2
            isReadonly: true
        }
        Signal {
            name: "stateChanged"
            Parameter { name: "state"; type: "State" }
        }
        Signal { name: "isConnectedChanged" }
        Signal { name: "urlUpdated" }
        Signal { name: "isSettingUpChanged" }
        Method {
            name: "checkConnectivity"
            Parameter { name: "verifyServerState"; type: "bool" }
        }
        Method { name: "checkConnectivity"; isCloned: true }
        Method {
            name: "slotConnectionValidatorResult"
            Parameter { name: "status"; type: "ConnectionValidator::Status" }
            Parameter { name: "errors"; type: "QStringList" }
        }
        Method { name: "slotInvalidCredentials" }
        Method { name: "slotCredentialsFetched" }
        Method { name: "slotCredentialsAsked" }
    }
    Component {
        file: "commonstrings.h"
        name: "OCC::CommonStrings"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["eu.OpenCloud.gui/CommonStrings 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
        Method { name: "fileBrowser"; type: "QString" }
        Method {
            name: "showInFileBrowser"
            type: "QString"
            Parameter { name: "path"; type: "QString" }
        }
        Method { name: "showInFileBrowser"; type: "QString"; isCloned: true }
        Method { name: "showInWebBrowser"; type: "QString" }
        Method { name: "copyToClipBoard"; type: "QString" }
        Method {
            name: "filterButtonText"
            type: "QString"
            Parameter { name: "filterCount"; type: "int" }
        }
    }
    Component {
        file: "folder.h"
        name: "OCC::Folder"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["eu.OpenCloud.gui/Folder 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Enum {
            name: "ChangeReason"
            isScoped: true
            values: ["Other", "UnLock"]
        }
        Property {
            name: "space"
            type: "GraphApi::Space"
            isPointer: true
            read: "space"
            notify: "spaceChanged"
            index: 0
            isReadonly: true
        }
        Property { name: "path"; type: "QString"; read: "path"; index: 1; isReadonly: true; isConstant: true }
        Property {
            name: "webDavUrl"
            type: "QUrl"
            read: "webDavUrl"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "isReady"
            type: "bool"
            read: "isReady"
            notify: "isReadyChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "isSyncPaused"
            type: "bool"
            read: "isSyncPaused"
            notify: "syncPausedChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "isSyncRunning"
            type: "bool"
            read: "isSyncRunning"
            notify: "isSyncRunningChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "isDeployed"
            type: "bool"
            read: "isDeployed"
            index: 6
            isReadonly: true
            isConstant: true
        }
        Signal { name: "syncStateChange" }
        Signal { name: "syncStarted" }
        Signal {
            name: "syncFinished"
            Parameter { name: "result"; type: "SyncResult" }
        }
        Signal {
            name: "syncPausedChanged"
            Parameter { type: "Folder"; isPointer: true }
            Parameter { name: "paused"; type: "bool" }
        }
        Signal { name: "canSyncChanged" }
        Signal { name: "spaceChanged" }
        Signal { name: "isReadyChanged" }
        Signal { name: "isSyncRunningChanged" }
        Signal {
            name: "watchedFileChangedExternally"
            Parameter { name: "path"; type: "QString" }
        }
        Method { name: "openInWebBrowser" }
        Method {
            name: "slotTerminateSync"
            Parameter { name: "reason"; type: "QString" }
        }
        Method { name: "startSync" }
        Method { name: "slotDiscardDownloadProgress" }
        Method { name: "slotWipeErrorBlacklist"; type: "int" }
        Method {
            name: "slotWatchedPathsChanged"
            Parameter { name: "paths"; type: "QSet<QString>" }
            Parameter { name: "reason"; type: "ChangeReason" }
        }
        Method {
            name: "implicitlyHydrateFile"
            Parameter { name: "relativepath"; type: "QString" }
        }
        Method { name: "slotNextSyncFullLocalDiscovery" }
        Method {
            name: "schedulePathForLocalDiscovery"
            Parameter { name: "relativePath"; type: "QString" }
        }
        Method { name: "reloadExcludes"; type: "bool" }
        Method { name: "slotSyncStarted" }
        Method {
            name: "slotSyncFinished"
            Parameter { type: "bool" }
        }
        Method {
            name: "slotSyncError"
            Parameter { name: "message"; type: "QString" }
            Parameter { name: "category"; type: "ErrorCategory" }
        }
        Method {
            name: "slotSyncError"
            isCloned: true
            Parameter { name: "message"; type: "QString" }
        }
        Method {
            name: "slotItemCompleted"
            Parameter { type: "SyncFileItemPtr" }
        }
        Method { name: "slotLogPropagationStart" }
        Method {
            name: "slotFolderConflicts"
            Parameter { name: "folder"; type: "Folder"; isPointer: true }
            Parameter { name: "conflictPaths"; type: "QStringList" }
        }
        Method {
            name: "warnOnNewExcludedItem"
            Parameter { name: "record"; type: "SyncJournalFileRecord" }
            Parameter { name: "path"; type: "QStringView" }
        }
        Method {
            name: "slotWatcherUnreliable"
            Parameter { name: "message"; type: "QString" }
        }
    }
    Component {
        file: "folderstatusmodel.h"
        name: "OCC::FolderStatusModel"
        accessSemantics: "reference"
        prototype: "QAbstractListModel"
        exports: ["eu.OpenCloud.gui/FolderStatusModel 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "Roles"
            isScoped: true
            values: [
                "AccessibleDescriptionRole",
                "DisplayName",
                "Subtitle",
                "FolderErrorMsg",
                "SyncProgressOverallPercent",
                "SyncProgressOverallString",
                "SyncProgressItemString",
                "Priority",
                "Quota",
                "FolderStatusIcon",
                "Folder"
            ]
        }
        Method {
            name: "slotUpdateFolderState"
            Parameter { type: "Folder"; isPointer: true }
        }
        Method { name: "resetFolders" }
        Method {
            name: "slotSetProgress"
            Parameter { name: "progress"; type: "ProgressInfo" }
            Parameter { name: "f"; type: "Folder"; isPointer: true }
        }
        Method {
            name: "slotFolderSyncStateChange"
            Parameter { name: "f"; type: "Folder"; isPointer: true }
        }
    }
    Component {
        file: "notifications.h"
        name: "OCC::Notification"
        accessSemantics: "value"
        exports: ["eu.OpenCloud.gui/notification 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property { name: "title"; type: "QString"; index: 0; isConstant: true }
        Property { name: "message"; type: "QString"; index: 1; isConstant: true }
        Property { name: "id"; type: "QString"; index: 2; isConstant: true }
    }
    Component {
        file: "qmlcredentials.h"
        name: "OCC::QmlCredentials"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["eu.OpenCloud.gui/QmlCredentials 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property { name: "host"; type: "QUrl"; index: 0; isFinal: true; isConstant: true }
        Property { name: "displayName"; type: "QString"; index: 1; isFinal: true; isConstant: true }
        Property {
            name: "ready"
            type: "bool"
            read: "isReady"
            notify: "readyChanged"
            index: 2
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "isRefresh"
            type: "bool"
            read: "isRefresh"
            write: "setIsRefresh"
            notify: "isRefreshChanged"
            index: 3
            isFinal: true
        }
        Signal { name: "readyChanged" }
        Signal { name: "logOutRequested" }
        Signal { name: "isRefreshChanged" }
    }
    Component {
        file: "qmlcredentials.h"
        name: "OCC::QmlOAuthCredentials"
        accessSemantics: "reference"
        prototype: "OCC::QmlCredentials"
        exports: ["eu.OpenCloud.gui/QmlOAuthCredentials 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "isValid"
            type: "bool"
            read: "isValid"
            notify: "readyChanged"
            index: 0
            isReadonly: true
            isFinal: true
        }
        Signal { name: "requestRestart" }
        Method { name: "copyAuthenticationUrlToClipboard" }
        Method { name: "openAuthenticationUrlInBrowser" }
    }
    Component {
        file: "qmlutils.h"
        name: "OCC::QmlUtils::OCQuickWidget"
        accessSemantics: "reference"
        prototype: "QQuickWidget"
        exports: ["eu.OpenCloud.gui/OCQuickWidget 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "enabled"
            type: "bool"
            read: "isEnabled"
            write: "setEnabled"
            notify: "enabledChanged"
            index: 0
            isFinal: true
        }
        Property { name: "parentFocusWidget"; type: "QWidget"; isPointer: true; index: 1; isFinal: true }
        Signal { name: "focusFirst" }
        Signal { name: "focusLast" }
        Signal { name: "enabledChanged" }
    }
    Component {
        file: "settingsdialog.h"
        name: "OCC::SettingsDialog"
        accessSemantics: "reference"
        prototype: "QMainWindow"
        exports: ["eu.OpenCloud.gui/SettingsDialog 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Enum {
            name: "SettingsPage"
            isScoped: true
            values: ["None", "Activity", "Settings", "Account"]
        }
        Property {
            name: "currentPage"
            type: "SettingsPage"
            read: "currentPage"
            write: "setCurrentPage"
            notify: "currentPageChanged"
            index: 0
        }
        Property {
            name: "currentAccount"
            type: "Account"
            isPointer: true
            read: "currentAccount"
            write: "setCurrentAccount"
            notify: "currentAccountChanged"
            index: 1
        }
        Signal { name: "focusFirst" }
        Signal { name: "focusLast" }
        Signal { name: "currentPageChanged" }
        Signal { name: "currentAccountChanged" }
        Method { name: "addAccount" }
        Method { name: "focusNext" }
        Method { name: "focusPrevious" }
    }
    Component {
        file: "spacesbrowser.h"
        name: "OCC::Spaces::SpacesBrowser"
        accessSemantics: "reference"
        prototype: "QWidget"
        exports: ["eu.OpenCloud.gui/SpacesBrowser 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "model"
            type: "QSortFilterProxyModel"
            isPointer: true
            read: "model"
            index: 0
            isConstant: true
        }
        Property {
            name: "currentSpace"
            type: "GraphApi::Space"
            isPointer: true
            read: "currentSpace"
            notify: "currentSpaceChanged"
            index: 1
        }
        Signal { name: "focusFirst" }
        Signal { name: "focusLast" }
        Signal {
            name: "currentSpaceChanged"
            Parameter { name: "space"; type: "GraphApi::Space"; isPointer: true }
        }
        Method { name: "focusNext" }
        Method { name: "focusPrevious" }
    }
    Component {
        file: "qmainwindow.h"
        name: "QMainWindow"
        accessSemantics: "reference"
        prototype: "QWidget"
        Enum {
            name: "DockOption"
            values: [
                "AnimatedDocks",
                "AllowNestedDocks",
                "AllowTabbedDocks",
                "ForceTabbedDocks",
                "VerticalTabs",
                "GroupedDragging"
            ]
        }
        Enum {
            name: "DockOptions"
            alias: "DockOption"
            isFlag: true
            values: [
                "AnimatedDocks",
                "AllowNestedDocks",
                "AllowTabbedDocks",
                "ForceTabbedDocks",
                "VerticalTabs",
                "GroupedDragging"
            ]
        }
        Property { name: "iconSize"; type: "QSize"; read: "iconSize"; write: "setIconSize"; index: 0 }
        Property {
            name: "toolButtonStyle"
            type: "Qt::ToolButtonStyle"
            read: "toolButtonStyle"
            write: "setToolButtonStyle"
            index: 1
        }
        Property { name: "animated"; type: "bool"; read: "isAnimated"; write: "setAnimated"; index: 2 }
        Property {
            name: "documentMode"
            type: "bool"
            read: "documentMode"
            write: "setDocumentMode"
            index: 3
        }
        Property {
            name: "tabShape"
            type: "QTabWidget::TabShape"
            read: "tabShape"
            write: "setTabShape"
            index: 4
        }
        Property {
            name: "dockNestingEnabled"
            type: "bool"
            read: "isDockNestingEnabled"
            write: "setDockNestingEnabled"
            index: 5
        }
        Property {
            name: "dockOptions"
            type: "DockOptions"
            read: "dockOptions"
            write: "setDockOptions"
            index: 6
        }
        Property {
            name: "unifiedTitleAndToolBarOnMac"
            type: "bool"
            read: "unifiedTitleAndToolBarOnMac"
            write: "setUnifiedTitleAndToolBarOnMac"
            index: 7
        }
        Signal {
            name: "iconSizeChanged"
            Parameter { name: "iconSize"; type: "QSize" }
        }
        Signal {
            name: "toolButtonStyleChanged"
            Parameter { name: "toolButtonStyle"; type: "Qt::ToolButtonStyle" }
        }
        Signal {
            name: "tabifiedDockWidgetActivated"
            Parameter { name: "dockWidget"; type: "QDockWidget"; isPointer: true }
        }
        Method {
            name: "setAnimated"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "setDockNestingEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "setUnifiedTitleAndToolBarOnMac"
            Parameter { name: "set"; type: "bool" }
        }
    }
    Component {
        file: "qquickwidget.h"
        name: "QQuickWidget"
        accessSemantics: "reference"
        prototype: "QWidget"
        Enum {
            name: "ResizeMode"
            values: ["SizeViewToRootObject", "SizeRootObjectToView"]
        }
        Enum {
            name: "Status"
            values: ["Null", "Ready", "Loading", "Error"]
        }
        Property {
            name: "resizeMode"
            type: "ResizeMode"
            read: "resizeMode"
            write: "setResizeMode"
            index: 0
        }
        Property {
            name: "status"
            type: "Status"
            read: "status"
            notify: "statusChanged"
            index: 1
            isReadonly: true
        }
        Property { name: "source"; type: "QUrl"; read: "source"; write: "setSource"; index: 2 }
        Signal {
            name: "statusChanged"
            Parameter { type: "QQuickWidget::Status" }
        }
        Signal {
            name: "sceneGraphError"
            Parameter { name: "error"; type: "QQuickWindow::SceneGraphError" }
            Parameter { name: "message"; type: "QString" }
        }
        Method {
            name: "setSource"
            Parameter { type: "QUrl" }
        }
        Method {
            name: "setContent"
            Parameter { name: "url"; type: "QUrl" }
            Parameter { name: "component"; type: "QQmlComponent"; isPointer: true }
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method { name: "continueExecute" }
        Method { name: "createFramebufferObject" }
        Method { name: "destroyFramebufferObject" }
        Method { name: "triggerUpdate" }
        Method {
            name: "propagateFocusObjectChanged"
            Parameter { name: "focusObject"; type: "QObject"; isPointer: true }
        }
    }
    Component {
        file: "qwidget.h"
        name: "QWidget"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "modal"; type: "bool"; read: "isModal"; index: 0; isReadonly: true }
        Property {
            name: "windowModality"
            type: "Qt::WindowModality"
            read: "windowModality"
            write: "setWindowModality"
            index: 1
        }
        Property { name: "enabled"; type: "bool"; read: "isEnabled"; write: "setEnabled"; index: 2 }
        Property { name: "geometry"; type: "QRect"; read: "geometry"; write: "setGeometry"; index: 3 }
        Property { name: "frameGeometry"; type: "QRect"; read: "frameGeometry"; index: 4; isReadonly: true }
        Property {
            name: "normalGeometry"
            type: "QRect"
            read: "normalGeometry"
            index: 5
            isReadonly: true
        }
        Property { name: "x"; type: "int"; read: "x"; index: 6; isReadonly: true }
        Property { name: "y"; type: "int"; read: "y"; index: 7; isReadonly: true }
        Property { name: "pos"; type: "QPoint"; read: "pos"; write: "move"; index: 8 }
        Property { name: "frameSize"; type: "QSize"; read: "frameSize"; index: 9; isReadonly: true }
        Property { name: "size"; type: "QSize"; read: "size"; write: "resize"; index: 10 }
        Property { name: "width"; type: "int"; read: "width"; index: 11; isReadonly: true }
        Property { name: "height"; type: "int"; read: "height"; index: 12; isReadonly: true }
        Property { name: "rect"; type: "QRect"; read: "rect"; index: 13; isReadonly: true }
        Property { name: "childrenRect"; type: "QRect"; read: "childrenRect"; index: 14; isReadonly: true }
        Property {
            name: "childrenRegion"
            type: "QRegion"
            read: "childrenRegion"
            index: 15
            isReadonly: true
        }
        Property {
            name: "sizePolicy"
            type: "QSizePolicy"
            read: "sizePolicy"
            write: "setSizePolicy"
            index: 16
        }
        Property {
            name: "minimumSize"
            type: "QSize"
            read: "minimumSize"
            write: "setMinimumSize"
            index: 17
        }
        Property {
            name: "maximumSize"
            type: "QSize"
            read: "maximumSize"
            write: "setMaximumSize"
            index: 18
        }
        Property {
            name: "minimumWidth"
            type: "int"
            read: "minimumWidth"
            write: "setMinimumWidth"
            index: 19
        }
        Property {
            name: "minimumHeight"
            type: "int"
            read: "minimumHeight"
            write: "setMinimumHeight"
            index: 20
        }
        Property {
            name: "maximumWidth"
            type: "int"
            read: "maximumWidth"
            write: "setMaximumWidth"
            index: 21
        }
        Property {
            name: "maximumHeight"
            type: "int"
            read: "maximumHeight"
            write: "setMaximumHeight"
            index: 22
        }
        Property {
            name: "sizeIncrement"
            type: "QSize"
            read: "sizeIncrement"
            write: "setSizeIncrement"
            index: 23
        }
        Property { name: "baseSize"; type: "QSize"; read: "baseSize"; write: "setBaseSize"; index: 24 }
        Property { name: "palette"; type: "QPalette"; read: "palette"; write: "setPalette"; index: 25 }
        Property { name: "font"; type: "QFont"; read: "font"; write: "setFont"; index: 26 }
        Property {
            name: "cursor"
            type: "QCursor"
            read: "cursor"
            write: "setCursor"
            reset: "unsetCursor"
            index: 27
        }
        Property {
            name: "mouseTracking"
            type: "bool"
            read: "hasMouseTracking"
            write: "setMouseTracking"
            index: 28
        }
        Property {
            name: "tabletTracking"
            type: "bool"
            read: "hasTabletTracking"
            write: "setTabletTracking"
            index: 29
        }
        Property {
            name: "isActiveWindow"
            type: "bool"
            read: "isActiveWindow"
            index: 30
            isReadonly: true
        }
        Property {
            name: "focusPolicy"
            type: "Qt::FocusPolicy"
            read: "focusPolicy"
            write: "setFocusPolicy"
            index: 31
        }
        Property { name: "focus"; type: "bool"; read: "hasFocus"; index: 32; isReadonly: true }
        Property {
            name: "contextMenuPolicy"
            type: "Qt::ContextMenuPolicy"
            read: "contextMenuPolicy"
            write: "setContextMenuPolicy"
            index: 33
        }
        Property {
            name: "updatesEnabled"
            type: "bool"
            read: "updatesEnabled"
            write: "setUpdatesEnabled"
            index: 34
        }
        Property { name: "visible"; type: "bool"; read: "isVisible"; write: "setVisible"; index: 35 }
        Property { name: "minimized"; type: "bool"; read: "isMinimized"; index: 36; isReadonly: true }
        Property { name: "maximized"; type: "bool"; read: "isMaximized"; index: 37; isReadonly: true }
        Property { name: "fullScreen"; type: "bool"; read: "isFullScreen"; index: 38; isReadonly: true }
        Property { name: "sizeHint"; type: "QSize"; read: "sizeHint"; index: 39; isReadonly: true }
        Property {
            name: "minimumSizeHint"
            type: "QSize"
            read: "minimumSizeHint"
            index: 40
            isReadonly: true
        }
        Property {
            name: "acceptDrops"
            type: "bool"
            read: "acceptDrops"
            write: "setAcceptDrops"
            index: 41
        }
        Property {
            name: "windowTitle"
            type: "QString"
            read: "windowTitle"
            write: "setWindowTitle"
            notify: "windowTitleChanged"
            index: 42
        }
        Property {
            name: "windowIcon"
            type: "QIcon"
            read: "windowIcon"
            write: "setWindowIcon"
            notify: "windowIconChanged"
            index: 43
        }
        Property {
            name: "windowIconText"
            type: "QString"
            read: "windowIconText"
            write: "setWindowIconText"
            notify: "windowIconTextChanged"
            index: 44
        }
        Property {
            name: "windowOpacity"
            type: "double"
            read: "windowOpacity"
            write: "setWindowOpacity"
            index: 45
        }
        Property {
            name: "windowModified"
            type: "bool"
            read: "isWindowModified"
            write: "setWindowModified"
            index: 46
        }
        Property { name: "toolTip"; type: "QString"; read: "toolTip"; write: "setToolTip"; index: 47 }
        Property {
            name: "toolTipDuration"
            type: "int"
            read: "toolTipDuration"
            write: "setToolTipDuration"
            index: 48
        }
        Property { name: "statusTip"; type: "QString"; read: "statusTip"; write: "setStatusTip"; index: 49 }
        Property { name: "whatsThis"; type: "QString"; read: "whatsThis"; write: "setWhatsThis"; index: 50 }
        Property {
            name: "accessibleName"
            type: "QString"
            read: "accessibleName"
            write: "setAccessibleName"
            index: 51
        }
        Property {
            name: "accessibleDescription"
            type: "QString"
            read: "accessibleDescription"
            write: "setAccessibleDescription"
            index: 52
        }
        Property {
            name: "layoutDirection"
            type: "Qt::LayoutDirection"
            read: "layoutDirection"
            write: "setLayoutDirection"
            reset: "unsetLayoutDirection"
            index: 53
        }
        Property {
            name: "autoFillBackground"
            type: "bool"
            read: "autoFillBackground"
            write: "setAutoFillBackground"
            index: 54
        }
        Property {
            name: "styleSheet"
            type: "QString"
            read: "styleSheet"
            write: "setStyleSheet"
            index: 55
        }
        Property {
            name: "locale"
            type: "QLocale"
            read: "locale"
            write: "setLocale"
            reset: "unsetLocale"
            index: 56
        }
        Property {
            name: "windowFilePath"
            type: "QString"
            read: "windowFilePath"
            write: "setWindowFilePath"
            index: 57
        }
        Property {
            name: "inputMethodHints"
            type: "Qt::InputMethodHints"
            read: "inputMethodHints"
            write: "setInputMethodHints"
            index: 58
        }
        Signal {
            name: "windowTitleChanged"
            Parameter { name: "title"; type: "QString" }
        }
        Signal {
            name: "windowIconChanged"
            Parameter { name: "icon"; type: "QIcon" }
        }
        Signal {
            name: "windowIconTextChanged"
            Parameter { name: "iconText"; type: "QString" }
        }
        Signal {
            name: "customContextMenuRequested"
            Parameter { name: "pos"; type: "QPoint" }
        }
        Method {
            name: "setEnabled"
            Parameter { type: "bool" }
        }
        Method {
            name: "setDisabled"
            Parameter { type: "bool" }
        }
        Method {
            name: "setWindowModified"
            Parameter { type: "bool" }
        }
        Method {
            name: "setWindowTitle"
            Parameter { type: "QString" }
        }
        Method {
            name: "setStyleSheet"
            Parameter { name: "styleSheet"; type: "QString" }
        }
        Method { name: "setFocus" }
        Method { name: "update" }
        Method { name: "repaint" }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method {
            name: "setHidden"
            Parameter { name: "hidden"; type: "bool" }
        }
        Method { name: "show" }
        Method { name: "hide" }
        Method { name: "showMinimized" }
        Method { name: "showMaximized" }
        Method { name: "showFullScreen" }
        Method { name: "showNormal" }
        Method { name: "close"; type: "bool" }
        Method { name: "raise" }
        Method { name: "lower" }
        Method {
            name: "updateMicroFocus"
            Parameter { name: "query"; type: "Qt::InputMethodQuery" }
        }
        Method { name: "updateMicroFocus"; isCloned: true }
        Method { name: "_q_showIfNotHidden" }
        Method { name: "_q_closestWindowHandle"; type: "QWindow"; isPointer: true }
        Method {
            name: "grab"
            type: "QPixmap"
            Parameter { name: "rectangle"; type: "QRect" }
        }
        Method { name: "grab"; type: "QPixmap"; isCloned: true }
    }
}
